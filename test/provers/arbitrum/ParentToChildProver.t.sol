// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

import {Test, console} from "forge-std/Test.sol";
import {ParentToChildProver} from "../../../src/contracts/provers/arbitrum/ParentToChildProver.sol";
import {IOutbox} from "@arbitrum/nitro-contracts/src/bridge/IOutbox.sol";
import {RLP} from "@openzeppelin/contracts/utils/RLP.sol";
import {ArbitrumOutputMock} from "../../mocks/ArbitrumOutputMock.sol";
import {BlockHeaders} from "../../utils/BlockHeaders.sol";

contract ParentToChildProverTest is Test {
    using RLP for RLP.Encoder;

    uint256 public parentForkId;

    IOutbox public outbox = IOutbox(0x65f07C7D521164a4d5DaC6eB8Fac8DA067A3B78F);
    ArbitrumOutputMock public mockOutbox; // Mock for testing with historical proofs

    uint256 public rootSlot = 3;

    // Helper proofs are re-encoded from fixture JSON to avoid JSON at runtime in Foundry

    function _getAccountProof() internal pure returns (bytes memory) {
        // Nodes sourced from test/proofs/arbitrum/proof.json (accountProof)
        bytes[] memory accountProofList = new bytes[](8);
        accountProofList[0] = RLP.encode(
            hex"f90211a038da4434d7e69e9362104d7dcee2dfa3e3f43890c30495bd68fe3b1afeb44c94a035e967816cdd3ab9f4d89fc90f4279f79f899bf7555a6169678cef6e3f21c379a07eac65661cf00768336a028dadb369acb6a6dc91fa7b2b0d26e25c00a80aecc4a0b11eb2675b61076e3f1bdfe54929b6c498593be84812bb194694050a7f6f58caa0ce38b5eca1839d8e853baccc352d8e8fb86c07ac96f9363d586b110f41558276a05fbc768e0579e4c706933b736faa843d7e324a27266be4295845a374bf41c88ca02314105294449ceccdc3ffcf9f3767b52d4ef06cd11099981234e72af3fa123da092b468327654efdc8461c0b74f6e198f56fcf4b6399d06b6f5698dca7c28a50aa0ad4c3365934666e9e00f577663c242453edbb83fdb9e1911e231fcf4e20d60dca0380a16e60942d31a45e95756de43fe83bc28aab001bc4a5fd01d5cbe943d9fbaa0ba2ec8b15cec0ddc7fef2a4be9103cd46f3881410c8eeda76b0b28b21c9e4deea05742813b414ecaf3f564ba73d6dc71996cf935ba54e62320c907ffd137704dcfa0f3c377a58e925ad1174b38912b136c3223f62ac807a87a4642a99ba27e6977f5a015b45b439e578b5473f46f2c3ce41c40bf72f2914157dc16d3ba47631453a725a09f7c7017c732732a92409c7156a4098c0000705d9b5c697c67273a1fb7cf8638a07c12148b1ea5df4b16295221805053bc9e0f9dd17eb18850a91c85ea7c88dac880"
        );
        accountProofList[1] = RLP.encode(
            hex"f90211a076997fb044394efefd65431b53a524d5eb2290b3b0e1890116f784174d596aeda0b8968fa1f00a2e09d7ac4a408e4bab3e766f3d7e785d706f22257efdc96cd4b1a09a6c326a8f6806b6d58a947d88fc7c9a76a5c77eceae42afac051f600f9ee9e4a084e3ff53080da56748a5e4ce2ee3ab9e6cc5bc84372c7782c9b063684ee992b2a033da7a02ca221c32faee769b1a3ffbcd243bfa0ea0c1a8baabca76bc3f3f2405a0903e53e6a518a48c3f9f52af364aa79eb94405810308011debeb035cd048074fa058c10c1cc31e9ab8a2c27b484f7124bbed87a70a7dc1b60172a063da68388e83a067baf77ce19046c540029fbca9ee14fb0c5795554211e1db3e14ee6bb795ad67a0d13b9d868e88036e4ec8141d31b5029df37d75588035cb786aad5206202afa99a0295a8296f68b233f0c68f01ded06b5e128bffbde1e6dcf28dec3a35b3c416520a0992acb316d334032e6841e324820b2f52f17f6d7945b83b5f5f354b24d288abda0f8f45bcc6061b8770c782840194b40c8ad51d7a0947d10614ec8af1146421968a0de6d0398f171bcf02b986f28ecbe90aa42ad83b5cf3b12f3e58b724786894bcfa018bef29cf46baaa61f0dd3bf3147f7f860e4ad29f70b63f8fab712e626c1d3faa04b1dca7f99052e1fda5a4de327e8ff839ceccd6537a55e9a4706332e03483753a004dedf6667cad8694e2f85fe42d5ecbdeb7933e199b3dc404a2e31581162180380"
        );
        accountProofList[2] = RLP.encode(
            hex"f90211a04c88c0d85eeb33d1c289da22a294404fd078f810f92f48c647e9843163be39c8a0fbf96d0f77d43b6c9996ccd5e4f4b40b2b9305538142e1f876cfdbf552d834e5a0bbb4bd935605deed29a89df5229d1d8bcb65da8ed8f77a00fb85663796cc7b16a04b38da724f1bbab889b75544f7839c97feeb2a712751bb002bd640b66c87f592a0f024627fe75a74f8dd7e96cd5131008c93a716f2bfa860bd32e8bfb45527913ba03c53e45f4b422e70f58b0771bdfb769789a1c152e5d5f30ca41b49da9df1bc1aa0754ae7196385a8041cc94968ff1cc0d96709457941b9642ff985c6ff8bbb01c3a0142359c24dc841bc0ea2dca02815de189a2c831915676949edb0b2c5f3b16e77a021cfcbd31898b9e72cd2882ef64f4f0d269bf14a1bce9b5b8f2116138356b746a0dc3acce623986e28a512522054e53f5e616c766f212f7000407a9dcbbb45b25ca0c6ac877949fdc553060064504f0eb8b0beefe0bf240764974ec4f81f80880943a0dfa3545af75ac9568054c851132060d0581cfa6f57e44b2945b20cec8beeb7c3a083a623424e1b3c424ddb556f0112b58554f647d0336f798da6103f32cc39b1daa05cca6030354733cfacad7968f4c5385df0eea36e21354d3729e05c3e447c9733a09b82734b5f792545b9a71876715e4a75395d0081b6a5d413127ca2e7e6449984a04fcf778190d87ef4b78200b52e5327d7e81ba0548424f0d4a4ff9f1b02a3703d80"
        );
        accountProofList[3] = RLP.encode(
            hex"f90211a077bfeed70a0cd41d4579ce8ac7b6c513aee510a7d142812f6a7e6fd3f5b6aa72a083eda0a7697c045ec0787883b2d98cdc32241d662b79473dc12043bd2125dd5ba02511a566d6c61af3339809f0807cc32a74d3b0cc4b6c3544f66f0bbc4b84e55ca05029b646dddc26120c94e0b596ea8c7eaa324430a2531b1ae21672f0646eb250a007852cc6ada1cbb56fb2094761ee11873520a8b05affa1b58a46a61da3b7168aa0416be0b65389df5b29fd18943f497356b7e766faebfec8d4f1f844630e126fd4a0c063a12c51f5497edc3d70dd9b121a41bfa8808b365ebf603a2a87e3cd0ef274a0605dbad5183bac47e7bb866950e82d6d87fb83891f6d6076559fef46e046b4eaa0a35c262bfd34becced7daabc0a328ab6e7517338cc682bfacd7bbc9b9d3ce1d4a0efc283fec80de4316c970e22500a76d9e552f60358f786016ba1ee784f629dfca08b5332fe915cfeb3dbea6eed989c36550ef65140214e3b3a2529bce9d9a81d2da085323fccc018f47a6fd73bda005eb9c14ae0c2d5a887e226f46a5a24f895f829a0969b188628ca67dd8b398fe4bbbc01bf0cd63cdc5aa2640f5440c2928759835ea07d5cffb5685ba148b18145606ab8ac703d09852f40933f0f6e076186d20484f5a0a9e14094226e2ea691552ce4b86abd4aa13a469c539de6692d1a7c156c82bbdba0455414fe4a2736d041dff8b9189173a102058d4e5850b46ce4d8e775ca8e4d2b80"
        );
        accountProofList[4] = RLP.encode(
            hex"f90211a0f66121e8862fe2649866898176473f70d52999c3f873b24aa4e7b296023a7ac8a089e45b60023942153e0338af43fa6c5ea7e57b25171b5ab89554d945814f2a4ca0523b076e65b863f1e53b4f6669efef836e39e82cd9a74f0a34e78838dba9d13da0d96a8f6098ff22c3c2f6fec398b6608d03fba59635a87b8dc3f495d80349e72da01e50531f0c6fe2af9b91d3c74fc5df221787dbe54853717a1fc0c8899e324163a09c1c6e36b86f1003addb22c6901941682512c45324404b56519f96d16e9cdcc7a0ce95e48554164c17bc0d5d6746fceb519baf483c24746e09d899fcef28af95bda05cef57ebf37ef84f257f8627a0f63d754c008430b37ec4de756547f699a3bba7a018325cf01dee3d3871dc645279ffd9b902b1c04b32e58011ea8e63a626844c7ba08711127acc48d486073d827c0ca370efa1d823d362e08c121ca288e261f145aea01eeadc10e6923b352443a00d049bd582e69456a9dc57eba04610233792413445a0c1c91f097d7864298daebf8ea2b0e73ad2f6e691ac287924aac1c146a8628734a0a48effadb56f85c976749515d473db1e7b1a742d47f454b906aee9c79c4faac6a03abed53b44d19ab57acbc4e468fda3588548e49b18220f58c141c2ed68c9e5eea0a8e669c00778a743aff6a6c9810636349c0c6ca0a7d74bb7dd8ae54e75670525a04fa89eab82137b70144f715155c09fce9262a4a3300370c0bef6a27b6f46834080"
        );
        accountProofList[5] = RLP.encode(
            hex"f90211a002aa0b1abb3d34e790685f8906b64c223b441a6ea31dd7fafee09d0978494697a0eb39bb6c22aa4f9aa5037bac0525c24df757215380e11d92a56edf199d0c7063a0371d7fa0bbd94059d89d2c53383ff3b57dc03c64170e140244011ea60ff507d3a08095765f59487ebdbcbf253600d91eedfe633969a98ee829a89703156668f693a0cdf75c4e5d746d7593a07350001fd26c753b2c82ea0aa661d2482123f1e6b680a01c8c50e7d75b5fb5d6cea31c62278d9c464f999eb11e03f4c7a58c866b680295a0ffd9e6e99b2514a1dad401f0a5908ac227833bee8a0fe7353354ec5d15c72dfea00f6b1a83cc66cf3e9000371b34a568e1871f0c215e082b08666927bd9330aafaa07d2e2fe0f5ebea8c4a38ce2301a88de40350d7b1617a81d44169cf44d70ce82fa015e85bac0391ed754bd8407f5314ecaa4ef306a0e303386ae225a27ef5dabea5a09af71c8f8b8e57c447b71ce1f2f5ca0ec2477cb8a93ad025667e56d08f95a139a0f810e0b029cec85e122f93ffba4312d63c55d14f8f493b6c7708d23f6ab7bb03a02cf0bda2c597a0db4dd8a0a72cef8f55d6b9bd0d510c22433332f5a6be339e4ba0d920f21b0b893309a46bee8c6e0e915c4ef43a8940bac3d3e642edd229c21640a07fbf5204f3f5985f5dd32cb704fb3b2f0937a30278706f65bdaf421e2ae09aa7a0dcaf3f91854299967b46fbeb459c1e10a9b37110bb3fb9c2c17159ece2ed060f80"
        );
        accountProofList[6] = RLP.encode(
            hex"f90131a0dd180ac5f12b37ee3ae9cc5602b590a841869f9df98dbd5d2f241bb8051006b8a04bbad4538086e4dee2eb3a548d998fa09265f4864544c9fa33769803cfe8c46680a0f733a5bd68facb1f1645098cebd5072c0200a54b3658b5501f7a3673e827c1a6a01769a419738d807498e6b42e8bc5306fb2f3989ecd5026811afe175f7a2c849780a05241c221c031e2ca56064816dd3d0ec73cbd67abdad0eae27cb4ed4d28503d37a04c9bff537bcdf2f57016371fe9393dac245bd371cc7ad1324e4da9728ceff80da0e97c753eb5415089740e4930e0fc365ea30a9e10020f6780fa740f37b9619dc680a0db55de35ad990486086ef8e4f05544868d0ca0d49d12b81cb39a52106e56cd3380a0a97974ddd28c59248132f8f180dfaa4af3fdbd5f4f4a8bbfa9f562a34a52b65080808080"
        );
        accountProofList[7] = RLP.encode(
            hex"f8669d3f067c00b247b61f5eb18cd60870b41b51d016cdb9c0628ca3659ee784b846f8440180a00222d5c9610a5760448e663edd56a333146c82e9db5d99906b117b58bb5e2f1aa08736329b580cfc0c0c39ee6700515e0bc51652afb614640db9e34a5d784933e8"
        );
        return RLP.encode(accountProofList);
    }

    function _getStorageProof() internal pure returns (bytes memory) {
        // Nodes sourced from test/proofs/arbitrum/proof.json (storageProof[0].proof)
        bytes[] memory storageProofList = new bytes[](5);
        storageProofList[0] = RLP.encode(
            hex"f90211a09c6780cbe0f580f859a71727bedebabb03dab6b7fd55f0c8294a71117acc4a45a005c529527edcacc5d0c190b3a413901e79baca01a20841656686e35739f7d5e5a00ff19791dec43fda459888346cc5166a3e265f83d4ce2656dcebacd5264805e8a04fef765f1e1e9726b5587c37e6e0e850f19fcc84eaf645ff4c11773681b6edc2a0cae6db60237b91ebcf880314d03c29fe94bdceffe4936ef468e03def93287986a0c470f067337054938e697f24a607a4230f55f88920651838478a1ccb0c284176a00989281377b93b1689eea9a8999c617f8c7a65dfbf0a6baa745fc861af01f999a026aaafb3c3763dffacf3d4cc6e3d0a6aad854506aa451b58ea4fc9f968f9dbeba0219203179b7f94decf2f64fd4f14af18148abb1850559c9be90b52613a2f9938a0b093dc98c7f81257050c68e405dbe63d2cb753c95d581b2ed67198972017661aa02c0a4b68deab4ba882ee822d871b4ddebc4db373d04f0d54a66570b381dde0e7a0cd443ff7a3a239b4c02ca42e99bde3a3dda785428dee66c68341750758521e6ca0abe94d3e9840c70021289ca6fb1ffd209896c952caac0b5a459cf70828884f26a03af6b9e2442f9ddcf80a2d561db6f06e1e94f59786314d8fb52987ed5d4091d0a0f1e52422a5d91888932aeb9aebac0d89e81cf9c8698d9c815e8ac29ae5dcbb74a01bb4f2157d9a73d0f4ac0acadcf584ae6cccafb17ce5179c670799d28adbac2680"
        );
        storageProofList[1] = RLP.encode(
            hex"f90211a069f8a83e1842a6db86148c1d344c191226cd218d4b6d04dd82b037ae251f1671a08aed5d976c0e25481e71af2f19fa1d76e2f870ac4d573eb4c72318c415d6918fa0b1363789c8ee457f58abba2200f4b6452c85bfe38b58e8ab4da3ec4a310c97e8a0727fb4782fba49e7590f9e9aa68b792910ebdf42ea2ead4608bcb2c71a286d97a0f5372e4b21a8a361b9e6cfd7b65d74e56498396fc590e8b943ad9e4d28bee6aaa0dfba61816f72665fc5d43145bceaa6071ee095284135388f80ba83414201fd9aa0585a18db4fea112d27ddb8b43ba5e28c1faf02fdf4b796d30c1d7b34be52fee8a0677173f0cc79f91a5a100fc8635697d1ec38d073ab249b901619f72f7633d20ba0524f1bd6ca920ee4c5aec35c9d191a14754e131b511d3944758823075a9e9c38a009275f52809bfca74681a9778cef24fdadbd2001f0bf4bd135b3095d4b9693d6a04c4176ca72940b04cce7dcf7d0baa33c5e8d917af5efe27fc9cf645e110b4cb8a0d51ed4d4a31159c947ce1383e30b91abb46458db048c669f0e913fb8912ba980a0d9b7d405b728e401d9900bdbdfd751a609df04c92de87b808d8a770a4a143482a0b6ce2f19dbfd1678a94a87f1fac5f2d21e6b0a61aa27d5b3ba586d1ad9c250d9a0c0c031c0b8a8cab6c4c5bd1765799fbfbace4ab2195f177efbed15c4e1388786a03646b9f30f03e6be0bd5b6a7bc6fd8b60777d7831d0227ad901833510552ce1680"
        );
        storageProofList[2] = RLP.encode(
            hex"f90211a0a5f06455febe8c356e98fc5309277c1f4f2355d042876bd38e07f0f0ecd26daea0cb860129dc3e58f8cc239b7c4edd6c56b4764a55b9d78207a6774814c13b1fa9a037e81f558d66f5233f8b27004486478b5eb0ab921722791caf7973a4ce420cb4a00d1853ece2c92897b6bc56301c8e0a11cd5d59d3e00bc2cfa9f98534bf2dfdc4a05ccedfe3d01cd9ed37a2b031ee6a396fbfebeba10e57c83b344d344eed257e17a0147b4d890e173d62f5643ec323eca72373dc2a0fdda38266f1f66535222b0ce2a0490e04de051b2ef10a04bb71c434e4d5f600c0a4cdf1f8d90c42a5896f78a92aa0aa0cb8c84de27ecb3b7026fc87f3157bbd33b45da2801e5105697db6257b1a0fa0f1ed31682157af8745b405cf952aa499f20a842e5fab3872dbfe01abc8978117a0d0173ee394e5e4e8621617ab94367633681096a10ec3c03c149f7748b1260f3aa0b9f8a0bebf69ab90d9a2c893388439f868a9b488dedd3f6182e98595effe7853a075a26f9c0423ba960c7cf229f20150eaa089a8a54fafec946c8155d91ec9bff4a01bc9a103b3c7d3a6bbab77183311fc01d92c6c96e2102152d41bd3fc1bd53d1aa078e328ac047eadb954f611cab36f9a09fa3fc823c3cc393774c946609c94adafa0f064265c070fbc9182eb91066a38b9ff69c0ebd3714bc7e78990100f6dd58d39a0e12854940b8199066b896e4dfd5a670dcc424743e2ea054f2f23674a88d118c780"
        );
        storageProofList[3] = RLP.encode(
            hex"f89180808080a0656215bf0f0a36bfa1130af59b00e814ba22615f7746f666514c1bd148ea4eb7a0a54ad96702e47d86ac1b57fc1e13d2328811e8ba8e992b305ed7842d5c36808180a0b084a9857fbcee87deed7cfc0aa5e747d3f11a6299a131f277635e264f9ac250808080808080a0d4b43a077c183cf24f339e4a1a86c0a8dab8a79d42e6d87ebe47b77f7166ff4f8080"
        );
        storageProofList[4] = RLP.encode(
            hex"f8429f20b31b279044164a5a47720d0e63ebade9d7ba091aa697d3d49f4543de2071a1a0cb53c786e7e875d7e3b1d3a770adbe02877ee5daab2ebfa55b935798b3ee9d24"
        );
        return RLP.encode(storageProofList);
    }

    function setUp() public {
        parentForkId = vm.createFork(vm.envString("ETHEREUM_RPC_URL"));
        vm.selectFork(parentForkId);

        // Mock Outbox holds the expected sendRoot -> targetBlockHash mapping for stability
        mockOutbox = new ArbitrumOutputMock();
        bytes32 sendRoot = 0x7995a5be000a0212a46f7f128e5ffd6f6a99fa9c72046d9e9b0668bd080712cd;
        bytes32 targetBlockHashFromProof = 0xa97ce065a04d2abfec36a459db323721847718d3159d51c4256d271ee3b37e42;
        mockOutbox.updateSendRoot(sendRoot, targetBlockHashFromProof);
    }

    function test_getTargetBlockHash() public {
        vm.selectFork(parentForkId);

        // Test with the sendRoot from the proof data
        bytes32 sendRoot = 0x7995a5be000a0212a46f7f128e5ffd6f6a99fa9c72046d9e9b0668bd080712cd;
        ParentToChildProver mockProver = new ParentToChildProver(address(mockOutbox), rootSlot);
        bytes32 result = mockProver.getTargetBlockHash(abi.encode(sendRoot));
        bytes32 expectedTargetBlockHash = 0xa97ce065a04d2abfec36a459db323721847718d3159d51c4256d271ee3b37e42;
        assertEq(result, expectedTargetBlockHash, "getTargetBlockHash should return correct Arbitrum block hash");
    }

    function test_verifyTargetBlockHash() public {
        vm.selectFork(parentForkId);
        ParentToChildProver prover = new ParentToChildProver(address(outbox), rootSlot);

        // State root derived from the proof's root node in fixture JSON
        bytes32 stateRoot = keccak256(
            hex"f90211a038da4434d7e69e9362104d7dcee2dfa3e3f43890c30495bd68fe3b1afeb44c94a035e967816cdd3ab9f4d89fc90f4279f79f899bf7555a6169678cef6e3f21c379a07eac65661cf00768336a028dadb369acb6a6dc91fa7b2b0d26e25c00a80aecc4a0b11eb2675b61076e3f1bdfe54929b6c498593be84812bb194694050a7f6f58caa0ce38b5eca1839d8e853baccc352d8e8fb86c07ac96f9363d586b110f41558276a05fbc768e0579e4c706933b736faa843d7e324a27266be4295845a374bf41c88ca02314105294449ceccdc3ffcf9f3767b52d4ef06cd11099981234e72af3fa123da092b468327654efdc8461c0b74f6e198f56fcf4b6399d06b6f5698dca7c28a50aa0ad4c3365934666e9e00f577663c242453edbb83fdb9e1911e231fcf4e20d60dca0380a16e60942d31a45e95756de43fe83bc28aab001bc4a5fd01d5cbe943d9fbaa0ba2ec8b15cec0ddc7fef2a4be9103cd46f3881410c8eeda76b0b28b21c9e4deea05742813b414ecaf3f564ba73d6dc71996cf935ba54e62320c907ffd137704dcfa0f3c377a58e925ad1174b38912b136c3223f62ac807a87a4642a99ba27e6977f5a015b45b439e578b5473f46f2c3ce41c40bf72f2914157dc16d3ba47631453a725a09f7c7017c732732a92409c7156a4098c0000705d9b5c697c67273a1fb7cf8638a07c12148b1ea5df4b16295221805053bc9e0f9dd17eb18850a91c85ea7c88dac880"
        );

        RLP.Encoder memory enc = RLP.encoder().push(bytes32(0)).push(bytes32(0)).push(bytes32(0)).push(stateRoot);

        bytes memory rlpBlockHeader = enc.encode();
        bytes32 homeBlockHash = keccak256(rlpBlockHeader);

        bytes32 sendRoot = 0x7995a5be000a0212a46f7f128e5ffd6f6a99fa9c72046d9e9b0668bd080712cd;
        bytes memory rlpAccountProof = _getAccountProof();
        bytes memory rlpStorageProof = _getStorageProof();
        bytes memory input = abi.encode(rlpBlockHeader, sendRoot, rlpAccountProof, rlpStorageProof);
        bytes32 expectedTargetBlockHash = 0xcb53c786e7e875d7e3b1d3a770adbe02877ee5daab2ebfa55b935798b3ee9d24;
        bytes32 result = prover.verifyTargetBlockHash(homeBlockHash, input);
        assertEq(result, expectedTargetBlockHash, "verifyTargetBlockHash should return correct Arbitrum block hash");
    }

    function test_verifyStorageSlot() public {
        vm.selectFork(parentForkId);
        ParentToChildProver prover = new ParentToChildProver(address(outbox), rootSlot);

        // Using the same proof.json data - verifying Outbox storage via verifyStorageSlot
        bytes32 stateRoot = keccak256(
            hex"f90211a038da4434d7e69e9362104d7dcee2dfa3e3f43890c30495bd68fe3b1afeb44c94a035e967816cdd3ab9f4d89fc90f4279f79f899bf7555a6169678cef6e3f21c379a07eac65661cf00768336a028dadb369acb6a6dc91fa7b2b0d26e25c00a80aecc4a0b11eb2675b61076e3f1bdfe54929b6c498593be84812bb194694050a7f6f58caa0ce38b5eca1839d8e853baccc352d8e8fb86c07ac96f9363d586b110f41558276a05fbc768e0579e4c706933b736faa843d7e324a27266be4295845a374bf41c88ca02314105294449ceccdc3ffcf9f3767b52d4ef06cd11099981234e72af3fa123da092b468327654efdc8461c0b74f6e198f56fcf4b6399d06b6f5698dca7c28a50aa0ad4c3365934666e9e00f577663c242453edbb83fdb9e1911e231fcf4e20d60dca0380a16e60942d31a45e95756de43fe83bc28aab001bc4a5fd01d5cbe943d9fbaa0ba2ec8b15cec0ddc7fef2a4be9103cd46f3881410c8eeda76b0b28b21c9e4deea05742813b414ecaf3f564ba73d6dc71996cf935ba54e62320c907ffd137704dcfa0f3c377a58e925ad1174b38912b136c3223f62ac807a87a4642a99ba27e6977f5a015b45b439e578b5473f46f2c3ce41c40bf72f2914157dc16d3ba47631453a725a09f7c7017c732732a92409c7156a4098c0000705d9b5c697c67273a1fb7cf8638a07c12148b1ea5df4b16295221805053bc9e0f9dd17eb18850a91c85ea7c88dac880"
        );

        RLP.Encoder memory enc = RLP.encoder().push(bytes32(0)).push(bytes32(0)).push(bytes32(0)).push(stateRoot);

        bytes memory rlpBlockHeader = enc.encode();
        bytes32 targetBlockHash = keccak256(rlpBlockHeader);

        // Outbox contract and storage slot from proof.json
        address outboxAddress = 0x65f07C7D521164a4d5DaC6eB8Fac8DA067A3B78F;
        uint256 storageSlot = 0xa5f93069861dd74d056c955efa9466cb8d321ebc28de4ed2489f5e80563267fa;
        bytes memory rlpAccountProof = _getAccountProof();
        bytes memory rlpStorageProof = _getStorageProof();
        bytes memory input = abi.encode(rlpBlockHeader, outboxAddress, storageSlot, rlpAccountProof, rlpStorageProof);

        (address account, uint256 slot, bytes32 value) = prover.verifyStorageSlot(targetBlockHash, input);

        assertEq(account, outboxAddress, "Account should match Outbox address");
        assertEq(slot, storageSlot, "Slot should match roots mapping slot");
        assertEq(
            value,
            0xcb53c786e7e875d7e3b1d3a770adbe02877ee5daab2ebfa55b935798b3ee9d24,
            "Value should match target block hash"
        );
    }

    function test_verifyStorageSlot_broadcaster() public {
        vm.selectFork(parentForkId);

        bytes32 message = 0x0000000000000000000000000000000000000000000000000000000074657374; // "test"
        address publisher = 0x9a56fFd72F4B526c523C733F1F74197A51c495E1;

        uint256 expectedSlot = uint256(keccak256(abi.encode(message, publisher)));

        bytes32 expectedValue = 0x0000000000000000000000000000000000000000000000000000000068f9ca7f;

        address knownAccount = 0x40F58Bd4616a6E76021F1481154DB829953BF01B;

        uint256 blockNumber = 208802827; // block number on parent chain

        BlockHeaders.ArbitrumBlockHeader memory blockHeader = BlockHeaders.ArbitrumBlockHeader({
            parentHash: 0xfd7e900043bd4cbcd26a0b0645320afef46a9cd7762644cc399d0ddfdff4627b,
            sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347,
            miner: 0xA4b000000000000000000073657175656e636572,
            stateRoot: 0x5c713ccb2467bdc1570ed9908c935540da985be107c4ac41026457b4bea266ef,
            transactionsRoot: 0x505b5fe0ffd7b5076915197325723373d249acf2e88a6e2f0724848e939c7e81,
            receiptsRoot: 0x15d355ec5aabfa77ebcb566bbf5c46c026cd3c56a4776804a6ee07e67e138b75,
            logsBloom: hex
            difficulty: 1,
            number: 208802827,
            gasLimit: 1125899906842624,
            gasUsed: 458046,
            timestamp: 1761519298,
            extraData: hex"1e23f2746bb6360c8abfbd7bad53fe27e5b5aeeb277f60e71964e3e513bb2171",
            mixHash: 0x000000000001b502000000000090eb6500000000000000280000000000000000,
            nonce: 0x00000000001c82fa,
            baseFeePerGas: 100000000,
            withdrawalsRoot: 0x0000000000000000000000000000000000000000000000000000000000000000,
            blobGasUsed: 0,
            excessBlobGas: 0,
            parentBeaconBlockRoot: 0x0000000000000000000000000000000000000000000000000000000000000000,
            requestsHash: 0x0000000000000000000000000000000000000000000000000000000000000000,
            totalDifficulty: 0,
            l1BlockNumber: 9497445,
            sendCount: 111874,
            sendRoot: 0x1E23F2746BB6360C8ABFBD7BAD53FE27E5B5AEEB277F60E71964E3E513BB2171,
            arbOsVersion: 1
        });

        bytes memory rlpBlockHeader = BlockHeaders.encode(blockHeader);

        bytes32 blockHash = keccak256(rlpBlockHeader);

        bytes32 expectedBlockHash = 0x798767bf4bff59e625e0421bb871d693f9747b00930b6af8ac4576879b9b69e3;

        bytes[] memory accountProofList = new bytes[](8);
        accountProofList[0] = RLP.encode(
            hex"f90211a00b9129986fb255d29b2d7e2f4a461e481688e9500a8afbb14101022f88cb0c61a019b17164b2d46e89362a62a8d0904f6376c64ba78e88307b0cdcc4732f4d0ec1a0d97b6e1661a65c12d0f5239ae0ece57781a43daa1684a65c635b2187d81b70a5a0bad864fb0f93de180913789bbfad92596fe3e99d0934a793b395c9cb9a63218ca065b8ca0d9985c597b180098649a77a4c2721c9d9ae17beb13843037861f4f9a4a0fc9e9d59f14644096672d092a50ab3e2ae03dca6655c38a1e2b380ae22ee67c1a01aa2379ec8d494bc1c902c4f17c2302ac577bd55a0c4aa47683f50aa2b2f8140a0993a599aaf0951a5a7631919063af4402c3d641f6f9ab8725fef749d830a011ea0ca71e91fb7f11e07db9caabe5a4adc57b802de5e5dad9847d3785d463c0e84f8a0573cb59b3a8dc384e197683907d1f205d726f633bc5d93a3e79a45e4d0f7e664a0c1dc3b6d13f946a209dcc99e062ec96e12cb5e8760ae7bec8f2f9f632027f744a09facd6b3138fb5040c73d4be931178d8e94ba4038479e891e590ab8643ee9429a0899d7ab3d6437c76800613f146d5846826f8ea91fdad8b0897d9a681255d607ea09978b201587e2cf7b123786149da416db0405aa8d6195072bf78b3bab3bab685a078583fab9f202a132a240eedcaea67e7e1d6c304c2c4410a60ef7adce1158d35a0cd8732d23ba7d5c12d5077a09d5ab10e555b73605a56787b23a2d95ada8ee52a80"
        );
        accountProofList[1] = RLP.encode(
            hex"f90211a0a45ceb81cf627f01ebd877d7a1e7501f03819f06c594bd272f168a8dffede404a004d419c71859c6b9f239bc1b81feee1289201ee415ee99def2379464ed1d49c9a01e376b55e215b034f20a8d5bbc512a1aba51d8ab0b69aa719f8643762bf9627ea036bb858270464ffaff9dded0a5fda855c216799ff81bf787be379276da5434cda0fd9272fb7068deda4ecca6b38d437b7fefe6b74c2ecb05e7e3bfaca85bcc13c3a0d59e1d93e1f08724629360b1eb9750ab1a8b3a82cc2b2f795b4431ae16531bc4a009fa49c8dfb3bcbcf51bb5bb58b0a8ed5aaaf9f656a049da357cbb1008fa8984a04c65c885cc8675e63598dd35b6bf7314b86ed0e38210b4cb7dce241e66b267fca01ab557558d2788d77b0d2e19e9d18f5b229eb1e2846ddab034e1e9f100a7e515a050130f3449dcffe8c63eabbbdb373e5ac1d8334a8499925f7aa18d96403db099a08e954e2b445aa35baec29bc4c925a2df324f9faa6f082b47a72bfe67aa015295a05940c5d56de4dc3376aa52080a2a3a760c727b09cdace6680a906beef1321a14a08e7168c0dd3e44cd3e073c937ffb5a278aca63ba87cc4dedd33333ec07a2e2b9a0a725ab95003081d7ce8af7497f494a70cbb1bc60fee10bf3b3d14476eab72c23a035a7905b2a510340bc7d06965273c3afb954b525dd04c1eb876574d99f282549a0670a4b9c060c1a67c12c50df03d324edcd14212cfd1dcc0415082f49f6fe9ab580"
        );
        accountProofList[2] = RLP.encode(
            hex"f90211a08d53e6b3fafd0580b09667db7dc9b2c167662d19fcb90df7cbcb0b4bc7aac6bca0dd833cf8dc7d283077ca0f7781b44f92aab7d270010e0ef01c9c6208f23342eca0bd8cb8a8c7bd05d2f661336aed18f45c578423635c256598e76596ec53b6e530a02a35427d60862456d2d475bcee472c2142ba61dfc12268fb0f1aec160eaf0173a0944c63177d6714bfa945a6effd81cc70d0cba37191113c5e8c77ceaff9a31a83a04dc7c2c10e42358f2a6fdf0a17960cb5e76e1026272a27463ce2c51f29a0aadca041fd278d66635ba77de6978bec08102a5926c5f7ba955af18fdeb129d935f44ca05c42817184da93c34835959e256b678d703667649ce8db04ac808033d7583c25a0a04ed4cfb93738e7293be89545d673b688cd64ed3199c7ba3306b98df447699aa0719e315c6538c67afa032a40b60adf9dde9b28dbcd09322b37e3f9dded0523e1a0b1e55e484f5ffd3f56b7128889522810e00777164c8d2a407a449d58b50d5879a0669d96b619e1736ae0ce5217c9c0e13bd574807ef5b57bce2b71037c795e435aa0931b9b51ab4be5e9ef2b750b8af1311e2e9474a5ca3fce74c92c649fec496a1fa09335ca0bcd6b8250eaa98a0cb657d83ee555ce9874939b77d36d2b7cba1568c1a06fae7888799cfd79640448d26921f2c3fb1abf4d810e7591c23ea9305b2a3d47a094f654fe2a8c80e24b4521c806c07ff72077a7f90d695e0da2f93393bffbd2ce80"
        );
        accountProofList[3] = RLP.encode(
            hex"f90211a008dc273d129836dbb27a15c36d96c6fa523bd09fecd175e5f58049fa755b5e77a0c5e73650e50d9146cabc0b5eec08265a7ae75b9d2bd14a8108e0db98da5aa4b6a0813d6ab6e46744847a9c76b9015393952b7bbd7ea14157881b11bf8d226be3d8a028a3888061770c183f4ca0586006814c3644f2f9172f1a79bd0e903c358a2c8da08fd2d7f5864aee54b4ac8e3864a77928fa555e1655e558638daf16738358b5d2a0f146340af3750d21e479c29b2f29f92649834b9544ef185bb543f67f6565f739a070907ccdbbac697174478df6acf24ba701117ac1f789b3afd72b002ea0b0d455a08786b8148ab9ac7c6e60d0fd3c371c0262cc2b4738da282797a450d84f1db21aa08ad85c815ebaf5fada93b85b1ce25dd2fbc69859c12c3a8d39768641c19c0606a0a1f18891e85935c58dff069a4266d6627c40fe7e99614f71a8942eb5d3c03e6aa0d61135542c4d13f2a611cb1957bb61b57cad5650ab9a5e2ed666ac320007dbafa0787c6f8ee17ba5a824e89cee1b8f6839139700e4cbf62f62625005a07f494079a023976343f17629f2ff40512eac1a10c254db4b7b26fcfe653bcc0092f2682b4fa0760d5f582ef0e17f5e2a344bff888a95f392d5d220a828304df7745b456050f2a0189509e85a1bcd72f4fe8e16bce32e0a61c42b7f12f3275aaaad88602e9e7fc1a052e392a011c128ac0a5603a5e77e89116f23abc8297ad55295f1601996affde880"
        );
        accountProofList[4] = RLP.encode(
            hex"f90211a09cbd69967953472248f33bc7b65dbc11e51a331f31c5a5b1863f701ea7f136dfa0b8d11e00b317ccd8df52195de70410ff9b35b47c701c13b6e89c242ee4004cf2a05c596a0006f15316a1b763c297b57c66511e8cd3d552336c7b89ab04bd743ee8a0e535f7b306552ea06eb435d824c4b9e58fa6609d660df7e63595ea3e77426c4ea00e0221ccf429371d655686bcccbf582ada081a835c405eedb15c63c251040b29a012934cf1e4a01094581e3807f046c883b3fc8be7182227fb4d5f271d1745772ea0d16a6490fad1250761d787577614e8d915ea318d73ba4b7eb5f437d90c8bc042a03086df460b9506f938d2e552b6733c8ce61541f8bd1101532cedaf4df3eae2f5a001edbcfe3c65d7b7de957dd654d41f8457caf1586d425cdd0acdf3ac3bcaaafaa0e3e9b52dd3ac2b4b58c807a7b09c99bca44f9e8331ceea2e4b50097122cf43f7a0ff05a213975640dab564ee97a48e2139b56b905aa9f8e1f2ccf46787c9ddbe07a02639992585fe80ab0aa3c1c9a0509a1e3450f78d2a39b17ff6782dc4b2cc9c57a0c8c052b18b1fcb7da093118caa6fbbdd55d30ceb9eeef71b6c2f01ee51ed4d32a0adce55a5efbd2f07154a502bcbe38921319bf30cbcbe8fe0b34e5ee353a53010a006bfb31bd1c9fdf0db840190f8f6ff696671729f3e78379ec55d77fd8fee6343a037c889398e7e44c91c454a77c69f3689b294157958e90bbf1848df30a7670d7480"
        );
        accountProofList[5] = RLP.encode(
            hex"f90211a092d7d5895494170e8a4b81bdf8798663e30016d3f3232dc5b9b60ba44e1854eca03c646b103610a0d85c5b512f863db1e02c758bf06cdade3ce278cb9ad7c5dd7ea0098340a50f05166e18dc4eaf680d4cca5c3ef3122b252bb25c61eb46113de5eca0bcf6ea20fee054dfa15f3ebb6bc4ff4303ddaa2eb1c559b2715782a43d90d38aa0f6f5db2476cb67984e422ba5ee4d033208701c5cd647eb20fe0fa610f65f999ba06337d18d5714d4429b75a560aa08901ea18e8cd05f02ab3b4cb183659a639a34a005fa8296eb592ce18931966e68763e963e69da388264d69d3ca9d6c1f0565188a08741c5279f29a8b3f4faef7612d7e1164ddaebbc274a3263a25a6be869249b99a06f3ce8da16d989dedcc9311638fe878fcfc210bb58906849e2e1f6337166c4daa0a2a00f1d61a1270107929ea04e7e1452278025ae90e95665e6f78f20fc0bf77da09020440ff072ab6e6f3b10bd9c93be7d3dee74c1c2106de434c687ff5cb6e2d6a00b640358864ac03587fa522fbfa7f42802db08cbaf46149c58e03e192ba6b468a06702242b240695c83bcb62eaeb3e0eb9dd3536c38ae574dfce25fd8c7210341ea0dd93ab820e27cf1469c04a4bfd6a26137e65aa8ba1a135f729a241dac513e192a0155927a6f52025cb53999a049840bd8693461083e276ff586a864781dba35f8ca0b5ec104a87a0773756ad6b0cc44edf6afe89c89db5ce94b3ecbc29b84bb1d85680"
        );
        accountProofList[6] = RLP.encode(
            hex"f90171a0e0d4461d9aec51264a25b47c44d423a8315ac1742752b979d3f27babd82ede39a0e221333bd270f7c2407ca99c34e15e74c120cdf2edf2fdc1523284ac32f89dd1a040196e43c59bba4d30dd08937e1f7536dd2bb76d502d29a9ef520e2df107fb2ba061760a5085194cbfaa61cbc5ecf57ab9a878d150051045770ba0c7e52d48948da0305506affe332344a6e16aa49bd5fc4cbc2d680602fd4a2c1bb130cb56aaefeda0f6bbc85f5eb04edf849889dd15811309c0cc1b0383bc4c92a7c1b4d0bcec5f5380a0bfca7c4787eb9d7e4f4a94d5996577d636056e4f0e8ee18dd43bc49d00ab7c48a06851e6a4a5d7312f645587de4855ec5b319324e981fc01da0e9bc30031428c6fa09e9ba798b699a2b7d92981123cefa304f5538c8f788f745b37a31e6fb75eaddca024eb1e981929ebac2bc6355806b961e91a918a65a3e0156c84b5aa567478a8b8808080a02d23b0058d7096d72982289e05102781c64644d61478aa11e6f8ac04a9771ddb8080"
        );
        accountProofList[7] = RLP.encode(
            hex"f8669d32cc05f6ec97cdd52af5716ff806f93adbe088fcbe6aea1197da14c00bb846f8440180a0bf4af2e8e4472148c44c393bd49fd938d117337c5348177981fb025d21339b76a03debe8ce6033a7570465c1bd57dfe3c0ca9dba458721039d4d47c10d5025252b"
        );

        bytes memory accountProof = RLP.encode(accountProofList);

        bytes32 stateRoot = keccak256(
            hex"f90211a00b9129986fb255d29b2d7e2f4a461e481688e9500a8afbb14101022f88cb0c61a019b17164b2d46e89362a62a8d0904f6376c64ba78e88307b0cdcc4732f4d0ec1a0d97b6e1661a65c12d0f5239ae0ece57781a43daa1684a65c635b2187d81b70a5a0bad864fb0f93de180913789bbfad92596fe3e99d0934a793b395c9cb9a63218ca065b8ca0d9985c597b180098649a77a4c2721c9d9ae17beb13843037861f4f9a4a0fc9e9d59f14644096672d092a50ab3e2ae03dca6655c38a1e2b380ae22ee67c1a01aa2379ec8d494bc1c902c4f17c2302ac577bd55a0c4aa47683f50aa2b2f8140a0993a599aaf0951a5a7631919063af4402c3d641f6f9ab8725fef749d830a011ea0ca71e91fb7f11e07db9caabe5a4adc57b802de5e5dad9847d3785d463c0e84f8a0573cb59b3a8dc384e197683907d1f205d726f633bc5d93a3e79a45e4d0f7e664a0c1dc3b6d13f946a209dcc99e062ec96e12cb5e8760ae7bec8f2f9f632027f744a09facd6b3138fb5040c73d4be931178d8e94ba4038479e891e590ab8643ee9429a0899d7ab3d6437c76800613f146d5846826f8ea91fdad8b0897d9a681255d607ea09978b201587e2cf7b123786149da416db0405aa8d6195072bf78b3bab3bab685a078583fab9f202a132a240eedcaea67e7e1d6c304c2c4410a60ef7adce1158d35a0cd8732d23ba7d5c12d5077a09d5ab10e555b73605a56787b23a2d95ada8ee52a80"
        );

        assertEq(stateRoot, blockHeader.stateRoot);

        bytes[] memory storageProofList = new bytes[](1);
        storageProofList[0] =
            RLP.encode(hex"e8a120e9c5cc9c750ef3a170b3a02cf938ffded668959e8c4d274ee43f58103248e67e858468f9ca7f");

        bytes memory storageProof = RLP.encode(storageProofList);

        bytes memory input = abi.encode(rlpBlockHeader, knownAccount, expectedSlot, accountProof, storageProof);

        ParentToChildProver parentToChildProver = new ParentToChildProver(address(outbox), 3);

        (address account, uint256 slot, bytes32 value) = parentToChildProver.verifyStorageSlot(blockHash, input);

        assertEq(account, knownAccount, "wrong account");
        assertEq(slot, expectedSlot, "wrong slot");
        assertEq(value, expectedValue, "wrong value");

        //assertEq(blockHash, expectedBlockHash);
    }
}
